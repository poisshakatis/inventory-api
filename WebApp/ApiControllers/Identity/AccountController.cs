using System.IdentityModel.Tokens.Jwt;
using System.Net;
using System.Net.Mime;
using System.Security.Claims;
using App.DAL.EF;
using App.Domain.Identity;
using App.DTO.v1_0;
using App.DTO.v1_0.Identity;
using Asp.Versioning;
using Helpers;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace WebApp.ApiControllers.Identity;

[ApiVersion("1.0")]
[ApiController]
[Route("/api/v{version:apiVersion}/identity/[controller]/[action]")]
public class AccountController(
    UserManager<AppUser> userManager,
    ILogger<AccountController> logger,
    SignInManager<AppUser> signInManager,
    IConfiguration configuration,
    AppDbContext context)
    : ControllerBase
{
    private readonly Random _rnd = new();

    /// <summary>
    /// Register new local user into app.
    /// </summary>
    /// <param name="registrationData">Username and password. And personal details.</param>
    /// <param name="expiresInSeconds">Override jwt lifetime for testing.</param>
    /// <returns>JWTResponse - jwt and refresh token</returns>
    [HttpPost]
    [Produces(MediaTypeNames.Application.Json)]
    [Consumes(MediaTypeNames.Application.Json)]
    [ProducesResponseType<JwtResponse>(StatusCodes.Status200OK)]
    [ProducesResponseType<RestApiErrorResponse>(StatusCodes.Status400BadRequest)]
    public async Task<ActionResult<JwtResponse>> Register(
        [FromBody] RegisterInfo registrationData,
        [FromQuery] int expiresInSeconds)
    {
        if (expiresInSeconds <= 0) expiresInSeconds = int.MaxValue;
        expiresInSeconds = expiresInSeconds < configuration.GetValue<int>("Jwt:ExpiresInSeconds")
            ? expiresInSeconds
            : configuration.GetValue<int>("Jwt:ExpiresInSeconds");


        // is user already registered
        var appUser = await userManager.FindByEmailAsync(registrationData.Email);
        if (appUser != null)
        {
            logger.LogWarning("User with email {} is already registered", registrationData.Email);
            return BadRequest(
                new RestApiErrorResponse
                {
                    Status = HttpStatusCode.BadRequest,
                    Error = $"User with email {registrationData.Email} is already registered"
                }
            );
        }

        // register user
        var refreshToken = new AppRefreshToken();
        appUser = new AppUser
        {
            Email = registrationData.Email,
            UserName = registrationData.Email,
            FirstName = registrationData.Firstname,
            LastName = registrationData.Lastname,
            RefreshTokens = new List<AppRefreshToken> { refreshToken }
        };
        refreshToken.AppUser = appUser;

        var result = await userManager.CreateAsync(appUser, registrationData.Password);
        if (!result.Succeeded)
            return BadRequest(
                new RestApiErrorResponse
                {
                    Status = HttpStatusCode.BadRequest,
                    Error = result.Errors.First().Description
                }
            );

        // save into claims also the user full name
        result = await userManager.AddClaimsAsync(appUser, new List<Claim>
        {
            new(ClaimTypes.GivenName, appUser.FirstName),
            new(ClaimTypes.Surname, appUser.LastName)
        });

        if (!result.Succeeded)
            return BadRequest(
                new RestApiErrorResponse
                {
                    Status = HttpStatusCode.BadRequest,
                    Error = result.Errors.First().Description
                }
            );

        // get full user from system with fixed data (maybe there is something generated by identity that we might need
        appUser = await userManager.FindByEmailAsync(appUser.Email);
        if (appUser == null)
        {
            logger.LogWarning("User with email {} is not found after registration", registrationData.Email);
            return BadRequest(
                new RestApiErrorResponse
                {
                    Status = HttpStatusCode.BadRequest,
                    Error = $"User with email {registrationData.Email} is not found after registration"
                }
            );
        }

        var claimsPrincipal = await signInManager.CreateUserPrincipalAsync(appUser);
        var jwt = IdentityHelpers.GenerateJwt(
            claimsPrincipal.Claims,
            configuration.GetValue<string>("Jwt:Key"),
            configuration.GetValue<string>("Jwt:Issuer"),
            configuration.GetValue<string>("Jwt:Audience"),
            expiresInSeconds
        );
        var res = new JwtResponse
        {
            Jwt = jwt,
            RefreshToken = refreshToken.RefreshToken,
            FirstName = appUser.FirstName,
            LastName = appUser.LastName
        };
        return Ok(res);
    }

    /// <summary>
    /// Log user in
    /// </summary>
    /// <param name="loginInfo">user info</param>
    /// <param name="expiresInSeconds">optional, override default value</param>
    /// <returns>JwtResponse with jwt and refreshtoken</returns>
    [HttpPost]
    [Produces(MediaTypeNames.Application.Json)]
    [ProducesResponseType(typeof(JwtResponse), StatusCodes.Status200OK)]
    [ProducesResponseType(typeof(RestApiErrorResponse), StatusCodes.Status404NotFound)]
    public async Task<ActionResult<string>> Login([FromBody] LoginInfo loginInfo, [FromQuery] int expiresInSeconds)
    {
        if (expiresInSeconds <= 0) expiresInSeconds = int.MaxValue;
        expiresInSeconds = expiresInSeconds < configuration.GetValue<int>("Jwt:ExpiresInSeconds")
            ? expiresInSeconds
            : configuration.GetValue<int>("Jwt:ExpiresInSeconds");

        // verify user
        var appUser = await userManager.FindByEmailAsync(loginInfo.Email);
        if (appUser == null)
        {
            logger.LogWarning("WebApi login failed, email {} not found", loginInfo.Email);
            await Task.Delay(_rnd.Next(100, 1000));

            return NotFound(
                new RestApiErrorResponse
                {
                    Status = HttpStatusCode.NotFound,
                    Error = "User/Password problem"
                }
            );
        }

        // verify password
        var result = await signInManager.CheckPasswordSignInAsync(appUser, loginInfo.Password, false);
        if (!result.Succeeded)
        {
            logger.LogWarning("WebApi login failed, password {} for email {} was wrong", loginInfo.Password,
                loginInfo.Email);
            await Task.Delay(_rnd.Next(100, 1000));

            return NotFound(
                new RestApiErrorResponse
                {
                    Status = HttpStatusCode.NotFound,
                    Error = "User/Password problem"
                }
            );
        }

        var claimsPrincipal = await signInManager.CreateUserPrincipalAsync(appUser);
        if (claimsPrincipal == null)
        {
            logger.LogWarning("WebApi login failed, claimsPrincipal null");
            await Task.Delay(_rnd.Next(100, 1000));

            return NotFound(
                new RestApiErrorResponse
                {
                    Status = HttpStatusCode.NotFound,
                    Error = "User/Password problem"
                }
            );
        }

        if (!context.Database.ProviderName!.Contains("InMemory"))
        {
            var deletedRows = await context.RefreshTokens
                .Where(t => t.AppUserId == appUser.Id && t.ExpirationDt < DateTime.UtcNow)
                .ExecuteDeleteAsync();
            logger.LogInformation("Deleted {} refresh tokens", deletedRows);
        }
        else
        {
            //TODO: inMemory delete for testing
        }

        var refreshToken = new AppRefreshToken
        {
            AppUserId = appUser.Id
        };
        context.RefreshTokens.Add(refreshToken);
        await context.SaveChangesAsync();

        var jwt = IdentityHelpers.GenerateJwt(
            claimsPrincipal.Claims,
            configuration.GetValue<string>("Jwt:Key"),
            configuration.GetValue<string>("Jwt:Issuer"),
            configuration.GetValue<string>("Jwt:Audience"),
            expiresInSeconds
        );

        var responseData = new JwtResponse
        {
            Jwt = jwt,
            RefreshToken = refreshToken.RefreshToken,
            FirstName = appUser.FirstName,
            LastName = appUser.LastName
        };

        return Ok(responseData);
    }

    /// <summary>
    /// Refresh token
    /// </summary>
    /// <param name="tokenRefreshInfo">jwt and refreshtoken</param>
    /// <param name="expiresInSeconds">optional, override default value</param>
    /// <returns>JwtResponse with jwt and refreshtoken</returns>
    [HttpPost]
    [Produces(MediaTypeNames.Application.Json)]
    [ProducesResponseType(typeof(JwtResponse), StatusCodes.Status200OK)]
    [ProducesResponseType(typeof(RestApiErrorResponse), StatusCodes.Status400BadRequest)]
    [ProducesResponseType(typeof(RestApiErrorResponse), StatusCodes.Status404NotFound)]
    public async Task<ActionResult<JwtResponse>> RefreshTokenData(
        [FromBody] TokenRefreshInfo tokenRefreshInfo,
        [FromQuery] int expiresInSeconds
    )
    {
        if (expiresInSeconds <= 0) expiresInSeconds = int.MaxValue;
        expiresInSeconds = expiresInSeconds < configuration.GetValue<int>("Jwt:ExpiresInSeconds")
            ? expiresInSeconds
            : configuration.GetValue<int>("Jwt:ExpiresInSeconds");

        // extract jwt object
        JwtSecurityToken jwt;
        try
        {
            jwt = new JwtSecurityTokenHandler().ReadJwtToken(tokenRefreshInfo.Jwt);
            if (jwt == null)
                return BadRequest(
                    new RestApiErrorResponse
                    {
                        Status = HttpStatusCode.BadRequest,
                        Error = "No token"
                    }
                );
        }
        catch (Exception)
        {
            return BadRequest(new RestApiErrorResponse
                {
                    Status = HttpStatusCode.BadRequest,
                    Error = "No token"
                }
            );
        }

        // validate jwt, ignore expiration date

        if (!IdentityHelpers.ValidateJwt(
                tokenRefreshInfo.Jwt,
                configuration.GetValue<string>("Jwt:Key"),
                configuration.GetValue<string>("Jwt:Issuer"),
                configuration.GetValue<string>("Jwt:Audience")
            ))
            return BadRequest("JWT validation fail");

        var userEmail = jwt.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Email)?.Value;
        if (userEmail == null)
            return BadRequest(
                new RestApiErrorResponse
                {
                    Status = HttpStatusCode.BadRequest,
                    Error = "No email in jwt"
                }
            );

        var appUser = await userManager.FindByEmailAsync(userEmail);
        if (appUser == null)
            return NotFound(
                new RestApiErrorResponse
                {
                    Status = HttpStatusCode.NotFound,
                    Error = $"User with email {userEmail} not found"
                });

        // load and compare refresh tokens
        await context.Entry(appUser).Collection(u => u.RefreshTokens!)
            .Query()
            .Where(x =>
                (x.RefreshToken == tokenRefreshInfo.RefreshToken && x.ExpirationDt > DateTime.UtcNow) ||
                (x.PreviousRefreshToken == tokenRefreshInfo.RefreshToken &&
                 x.PreviousExpirationDt > DateTime.UtcNow)
            )
            .ToListAsync();

        if (appUser.RefreshTokens == null || appUser.RefreshTokens.Count == 0)
            return NotFound(
                new RestApiErrorResponse
                {
                    Status = HttpStatusCode.NotFound,
                    Error = $"RefreshTokens collection is null or empty - {appUser.RefreshTokens?.Count}"
                }
            );

        if (appUser.RefreshTokens.Count != 1) return NotFound("More than one valid refresh token found");

        // get claims based user
        var claimsPrincipal = await signInManager.CreateUserPrincipalAsync(appUser);
        if (claimsPrincipal == null)
        {
            logger.LogWarning("Could not get ClaimsPrincipal for user {}", userEmail);
            return NotFound(
                new RestApiErrorResponse
                {
                    Status = HttpStatusCode.BadRequest,
                    Error = "User/Password problem"
                }
            );
        }

        // generate jwt
        var jwtResponseStr = IdentityHelpers.GenerateJwt(
            claimsPrincipal.Claims,
            configuration.GetValue<string>("Jwt:Key"),
            configuration.GetValue<string>("Jwt:Issuer"),
            configuration.GetValue<string>("Jwt:Audience"),
            expiresInSeconds
        );

        // make new refresh token, keep old one still valid for some time
        var refreshToken = appUser.RefreshTokens.First();
        if (refreshToken.RefreshToken == tokenRefreshInfo.RefreshToken)
        {
            refreshToken.PreviousRefreshToken = refreshToken.RefreshToken;
            refreshToken.PreviousExpirationDt = DateTime.UtcNow.AddMinutes(1);

            refreshToken.RefreshToken = Guid.NewGuid().ToString();
            refreshToken.ExpirationDt = DateTime.UtcNow.AddDays(7);

            await context.SaveChangesAsync();
        }

        var res = new JwtResponse
        {
            Jwt = jwtResponseStr,
            RefreshToken = refreshToken.RefreshToken,
            FirstName = appUser.FirstName,
            LastName = appUser.LastName
        };

        return Ok(res);
    }

    /// <summary>
    /// Log user out
    /// </summary>
    /// <param name="logout">refresh token</param>
    /// <returns>Deleted tokens count</returns>
    [HttpPost]
    [Produces(MediaTypeNames.Application.Json)]
    [Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)]
    [ProducesResponseType(typeof(JwtResponse), StatusCodes.Status200OK)]
    [ProducesResponseType(typeof(RestApiErrorResponse), StatusCodes.Status404NotFound)]
    public async Task<ActionResult> Logout(
        [FromBody] LogoutInfo logout)
    {
        // delete the refresh token - so user is kicked out after jwt expiration
        // We do not invalidate the jwt on serverside - that would require pipeline modification and checking against db on every request
        // so client can actually continue to use the jwt until it expires (keep the jwt expiration time short ~1 min)

        var userIdStr = userManager.GetUserId(User);
        if (userIdStr == null)
            return BadRequest(
                new RestApiErrorResponse
                {
                    Status = HttpStatusCode.BadRequest,
                    Error = "Invalid refresh token"
                }
            );

        if (Guid.TryParse(userIdStr, out var userId)) return BadRequest("Deserialization error");

        var appUser = await context.Users
            .Where(u => u.Id == userId)
            .SingleOrDefaultAsync();
        if (appUser == null)
            return NotFound(
                new RestApiErrorResponse
                {
                    Status = HttpStatusCode.NotFound,
                    Error = "User/Password problem"
                }
            );

        await context.Entry(appUser)
            .Collection(u => u.RefreshTokens!)
            .Query()
            .Where(x =>
                x.RefreshToken == logout.RefreshToken ||
                x.PreviousRefreshToken == logout.RefreshToken
            )
            .ToListAsync();

        foreach (var appRefreshToken in appUser.RefreshTokens!) context.RefreshTokens.Remove(appRefreshToken);

        var deleteCount = await context.SaveChangesAsync();

        return Ok(new { TokenDeleteCount = deleteCount });
    }
}