using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using App.Contracts.Services;
using App.DAL.EF;
using App.Domain.Identity;
using App.DTO.v1_0.Identity;
using Helpers;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;

namespace App.Services;

public class AuthService : IAuthService
{
    private readonly Random _rnd = new();
    private readonly UserManager<AppUser> _userManager;
    private readonly ILogger<AuthService> _logger;
    private readonly SignInManager<AppUser> _signInManager;
    private readonly IConfiguration _configuration;
    private readonly AppDbContext _context;

    public AuthService(UserManager<AppUser> userManager, ILogger<AuthService> logger,
        SignInManager<AppUser> signInManager, IConfiguration configuration, AppDbContext context)
    {
        _userManager = userManager;
        _logger = logger;
        _signInManager = signInManager;
        _configuration = configuration;
        _context = context;
    }

    public async Task<AuthResult<JwtResponse>> RegisterAsync(RegisterInfo registrationData)
    {
        // is user already registered
        var appUser = await _userManager.FindByEmailAsync(registrationData.Email);
        if (appUser != null)
        {
            _logger.LogWarning("User with email {} is already registered", registrationData.Email);
            return new AuthResult<JwtResponse>(
                errors: $"User with email {registrationData.Email} is already registered");
        }

        // register user
        var refreshToken = new AppRefreshToken();
        appUser = new AppUser
        {
            Email = registrationData.Email,
            UserName = registrationData.Email,
            FirstName = registrationData.Firstname,
            LastName = registrationData.Lastname,
            RefreshTokens = new List<AppRefreshToken> { refreshToken }
        };
        refreshToken.AppUser = appUser;

        var result = await _userManager.CreateAsync(appUser, registrationData.Password);
        if (!result.Succeeded) return new AuthResult<JwtResponse>(errors: result.Errors.First().Description);

        // save into claims also the user full name
        result = await _userManager.AddClaimsAsync(appUser, new List<Claim>
        {
            new(ClaimTypes.GivenName, appUser.FirstName),
            new(ClaimTypes.Surname, appUser.LastName)
        });

        if (!result.Succeeded) return new AuthResult<JwtResponse>(errors: result.Errors.First().Description);

        // get full user from system with fixed data (maybe there is something generated by identity that we might need
        appUser = await _userManager.FindByEmailAsync(appUser.Email);
        if (appUser == null)
        {
            _logger.LogWarning("User with email {} is not found after registration", registrationData.Email);
            return new AuthResult<JwtResponse>(
                errors: $"User with email {registrationData.Email} is not found after registration");
        }

        var claimsPrincipal = await _signInManager.CreateUserPrincipalAsync(appUser);
        var jwt = IdentityHelpers.GenerateJwt(
            claimsPrincipal.Claims,
            _configuration.GetValue<string>("Jwt:Key"),
            _configuration.GetValue<string>("Jwt:Issuer"),
            _configuration.GetValue<string>("Jwt:Audience"),
            _configuration.GetValue<int>("Jwt:ExpiresInSeconds")
        );

        var jwtResponse = new JwtResponse
        {
            Jwt = jwt,
            RefreshToken = refreshToken.RefreshToken,
            FirstName = appUser.FirstName,
            LastName = appUser.LastName
        };
        return new AuthResult<JwtResponse>(true, jwtResponse);
    }

    public async Task<AuthResult<JwtResponse>> LoginAsync(LoginInfo loginInfo)
    {
        // verify user
        var appUser = await _userManager.FindByEmailAsync(loginInfo.Email);
        if (appUser == null)
        {
            _logger.LogWarning("WebApi login failed, email {} not found", loginInfo.Email);
            await Task.Delay(_rnd.Next(100, 1000));
            return new AuthResult<JwtResponse>(errors: "User/Password problem");
        }

        // verify password
        var result = await _signInManager.CheckPasswordSignInAsync(appUser, loginInfo.Password, false);
        if (!result.Succeeded)
        {
            _logger.LogWarning("WebApi login failed, password {} for email {} was wrong", loginInfo.Password,
                loginInfo.Email);
            await Task.Delay(_rnd.Next(100, 1000));
            return new AuthResult<JwtResponse>(errors: "User/Password problem");
        }

        var claimsPrincipal = await _signInManager.CreateUserPrincipalAsync(appUser);

        if (!_context.Database.ProviderName!.Contains("InMemory"))
        {
            var deletedRows = await _context.RefreshTokens
                .Where(t => t.AppUserId == appUser.Id && t.ExpirationDt < DateTime.UtcNow)
                .ExecuteDeleteAsync();
            _logger.LogInformation("Deleted {} refresh tokens", deletedRows);
        }

        var refreshToken = new AppRefreshToken
        {
            AppUserId = appUser.Id
        };
        _context.RefreshTokens.Add(refreshToken);
        await _context.SaveChangesAsync();

        var jwt = IdentityHelpers.GenerateJwt(
            claimsPrincipal.Claims,
            _configuration.GetValue<string>("Jwt:Key"),
            _configuration.GetValue<string>("Jwt:Issuer"),
            _configuration.GetValue<string>("Jwt:Audience"),
            _configuration.GetValue<int>("Jwt:ExpiresInSeconds")
        );

        var jwtResponse = new JwtResponse
        {
            Jwt = jwt,
            RefreshToken = refreshToken.RefreshToken,
            FirstName = appUser.FirstName,
            LastName = appUser.LastName
        };
        return new AuthResult<JwtResponse>(true, jwtResponse);
    }

    public async Task<AuthResult<JwtResponse>> RefreshTokenAsync(TokenRefreshInfo tokenRefreshInfo)
    {
        // extract jwt object
        JwtSecurityToken jwt;
        try
        {
            jwt = new JwtSecurityTokenHandler().ReadJwtToken(tokenRefreshInfo.Jwt);
            if (jwt == null) return new AuthResult<JwtResponse>(errors: "No token");
        }
        catch (Exception)
        {
            return new AuthResult<JwtResponse>(errors: "No token");
        }

        // validate jwt, ignore expiration date

        if (!IdentityHelpers.ValidateJwt(
                tokenRefreshInfo.Jwt,
                _configuration.GetValue<string>("Jwt:Key"),
                _configuration.GetValue<string>("Jwt:Issuer"),
                _configuration.GetValue<string>("Jwt:Audience")
            )) return new AuthResult<JwtResponse>(errors: "JWT validation fail");

        var userEmail = jwt.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Email)?.Value;
        if (userEmail == null) return new AuthResult<JwtResponse>(errors: "No email in jwt");

        var appUser = await _userManager.FindByEmailAsync(userEmail);
        if (appUser == null) return new AuthResult<JwtResponse>(errors: $"User with email {userEmail} not found");

        // load and compare refresh tokens
        await _context.Entry(appUser).Collection(u => u.RefreshTokens!)
            .Query()
            .Where(x =>
                (x.RefreshToken == tokenRefreshInfo.RefreshToken && x.ExpirationDt > DateTime.UtcNow) ||
                (x.PreviousRefreshToken == tokenRefreshInfo.RefreshToken &&
                 x.PreviousExpirationDt > DateTime.UtcNow)
            )
            .ToListAsync();

        if (appUser.RefreshTokens == null || appUser.RefreshTokens.Count == 0)
            return new AuthResult<JwtResponse>(
                errors: $"RefreshTokens collection is null or empty - {appUser.RefreshTokens?.Count}");

        if (appUser.RefreshTokens.Count != 1)
            return new AuthResult<JwtResponse>(errors: "More than one valid refresh token found");

        // get claims based user
        var claimsPrincipal = await _signInManager.CreateUserPrincipalAsync(appUser);

        // generate jwt
        var jwtResponseStr = IdentityHelpers.GenerateJwt(
            claimsPrincipal.Claims,
            _configuration.GetValue<string>("Jwt:Key"),
            _configuration.GetValue<string>("Jwt:Issuer"),
            _configuration.GetValue<string>("Jwt:Audience"),
            _configuration.GetValue<int>("Jwt:ExpiresInSeconds")
        );

        // make new refresh token, keep old one still valid for some time
        var refreshToken = appUser.RefreshTokens.First();
        if (refreshToken.RefreshToken == tokenRefreshInfo.RefreshToken)
        {
            refreshToken.PreviousRefreshToken = refreshToken.RefreshToken;
            refreshToken.PreviousExpirationDt = DateTime.UtcNow.AddMinutes(1);

            refreshToken.RefreshToken = Guid.NewGuid().ToString();
            refreshToken.ExpirationDt = DateTime.UtcNow.AddDays(7);

            await _context.SaveChangesAsync();
        }

        var jwtResponse = new JwtResponse
        {
            Jwt = jwtResponseStr,
            RefreshToken = refreshToken.RefreshToken,
            FirstName = appUser.FirstName,
            LastName = appUser.LastName
        };
        return new AuthResult<JwtResponse>(true, jwtResponse);
    }

    public async Task<AuthResult> LogoutAsync(LogoutInfo logout, ClaimsPrincipal user)
    {
        // delete the refresh token - so user is kicked out after jwt expiration
        // We do not invalidate the jwt on serverside - that would require pipeline modification and checking against db on every request
        // so client can actually continue to use the jwt until it expires (keep the jwt expiration time short ~1 min)

        var userIdStr = _userManager.GetUserId(user);
        if (userIdStr == null) return new AuthResult(errors: "Invalid refresh token");

        if (!Guid.TryParse(userIdStr, out var userId)) return new AuthResult(errors: "Deserialization error");

        var appUser = await _context.Users
            .Where(u => u.Id == userId)
            .SingleOrDefaultAsync();
        if (appUser == null) return new AuthResult(errors: "User/Password problem");

        await _context.Entry(appUser)
            .Collection(u => u.RefreshTokens!)
            .Query()
            .Where(x =>
                x.RefreshToken == logout.RefreshToken ||
                x.PreviousRefreshToken == logout.RefreshToken
            )
            .ToListAsync();

        foreach (var appRefreshToken in appUser.RefreshTokens!) _context.RefreshTokens.Remove(appRefreshToken);

        await _context.SaveChangesAsync();

        return new AuthResult(true);
    }
}